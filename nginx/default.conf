server {
    listen       80;
    server_name  localhost;

    # Set resolver for DNS lookups within Docker network
    resolver 127.0.0.11 ipv6=off;

    # Enable response body capture
    lua_need_request_body on;

    location / {
        # Initialize response body variables
        set $resp_body "";
        set $resp_body_json "";
        
        # Capture response body using Lua
        body_filter_by_lua_block {
            local resp_body = ngx.var.resp_body or ""
            local chunk = ngx.arg[1] or ""
            ngx.var.resp_body = resp_body .. chunk
            
            -- If this is the last chunk (ngx.arg[2] is true), process the complete response
            if ngx.arg[2] then
                local complete_body = ngx.var.resp_body
                -- Try to parse as JSON and reformat, or use as-is if not valid JSON
                local cjson = require "cjson"
                local success, parsed = pcall(cjson.decode, complete_body)
                if success then
                    ngx.var.resp_body_json = cjson.encode(parsed)
                else
                    -- If not valid JSON, just escape the string properly
                    ngx.var.resp_body_json = '"' .. complete_body:gsub('"', '\\"'):gsub('\n', '\\n'):gsub('\r', '\\r') .. '"'
                end
            end
        }

        proxy_pass https://opensearch-node1:9200;
        proxy_ssl_verify off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Add CORS headers for OpenSearch
        proxy_set_header Access-Control-Allow-Origin *;
        proxy_set_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        proxy_set_header Access-Control-Allow-Headers "Content-Type, Authorization";
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
            return 204;
        }
    }
}

server {
    listen       443 ssl;
    server_name  localhost;

    # Set resolver for DNS lookups within Docker network
    resolver 127.0.0.11 ipv6=off;

    # Enable response body capture
    lua_need_request_body on;

    # Use the SSL certificates created in the Dockerfile
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        # Initialize response body variables
        set $resp_body "";
        set $resp_body_json "";
        
        # Capture response body using Lua
        body_filter_by_lua_block {
            local resp_body = ngx.var.resp_body or ""
            local chunk = ngx.arg[1] or ""
            ngx.var.resp_body = resp_body .. chunk
            
            -- If this is the last chunk (ngx.arg[2] is true), process the complete response
            if ngx.arg[2] then
                local complete_body = ngx.var.resp_body
                -- Try to parse as JSON and reformat, or use as-is if not valid JSON
                local cjson = require "cjson"
                local success, parsed = pcall(cjson.decode, complete_body)
                if success then
                    ngx.var.resp_body_json = cjson.encode(parsed)
                else
                    -- If not valid JSON, just escape the string properly
                    ngx.var.resp_body_json = '"' .. complete_body:gsub('"', '\\"'):gsub('\n', '\\n'):gsub('\r', '\\r') .. '"'
                end
            end
        }

        proxy_pass https://opensearch-node1:9200;
        proxy_ssl_verify off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Add CORS headers for OpenSearch
        proxy_set_header Access-Control-Allow-Origin *;
        proxy_set_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        proxy_set_header Access-Control-Allow-Headers "Content-Type, Authorization";
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
            return 204;
        }
    }
}
